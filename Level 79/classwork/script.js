// // ES6  გამოვიდა 2015 წელს და არის JavaScript-ის სტანდარტების მნიშვნელოვანი 
// განახლება. ეს განახლება შეიცავს უამრავ ახალ შესაძლებლობას და გაუმჯობესებას, რომლებიც ძალიან 
// აუმჯობესებს კოდირების პროცესს, კოდის სიწმინდეს და მისაწვდომობას.

// ES6-ის მნიშვნელოვანი განახლებები:
// let და const:

// ES6-მა დაამატა let და const, რომლებიც უკეთესად მართავენ ცვლადების არსებობის ციკლს. 
// let გამოიყენება ცვლადის ცვალებადობისთვის, ხოლო const — უცვლელი ცვლადებისთვის.

// Arrow functions  ჩვეულებრივი ფუნქციების გადაცემას სინტაქსურად აადვილებას, ასევე
//  ინარჩუნებს this .

// ES6-მა შეიტანა  სტრინგების სიმარტივე: template literals, რომელიც აადვილებს ცვლადების 
// ჩასმას სტრინგებში.

// Destructuring საშუალებას იძლევა მარტივად გამოიტანოთ მონაცემები მასივებისა და ობიექტებიდან.



// ES6-მა ასევე დაამატა ფუნქციებში პარამეტრებისთვის default მნიშვნელობების დადგენის შესაძლებლობა.

// ES6-მა კიდევ დაამატა კლასების მხარდაჭერა, რაც JavaScript-ში ობიექტზე ორიენტირებულ პროგრამირებას ბევრად აადვილებს.

// რა სარგებელი მოგვიტანა ამ ყველაფერმა:
// კოდის  სიმარტივე ES6-მა ძალიან გაამარტივა კოდის წერა. მაგალითად, let და const ცვლადების გამოყენება ნიშნავს, 
// რომ შეცდომები გაცილებით ადვილად გაირკვევა.

// გაამარტივა სინტაქსი

// Arrow functions და template literals არსებობამ ძალიან გაამარტივა  სინტაქსი .


// const და let ძალიან მნიშნვენოლვანი განახლებაა, რადგან უკვე აღარ შეგვიძლია ვმართოთ ცვლადი, რომელიც შემთხვევით შეიცვლება, 
// რითაც შეიგვიძლია შეცდიმები ავირიდოთ.


// #2

// let და const ბევრად უფრო ზუსტი და უსაფრთხო არიან JavaScript-ში ცვლადების მართვისას, ვიდრე var. მათ
//  აქვთ ბევრი უპირატესობა.

// let და const არ ქმნიან ჰოისტინგს  ისე, როგორც var. ეს ნიშნავს, რომ let და const მხოლოდ იმ 
// კოდში არიან ხელმისაწვდომები, სადაც ისინი შექმნილნი არიან, ხოლო var იწვევს ჰოისტინგს, სადაც მისი მნიშვნელობა არის 
// გამოყოფილი ფუნქცია ან ბლოკამდე.

// const გამოიყენება იმ ცვლადებისათვის, რომელთა მნიშვნელობა არ იცვლება. let კი ცვლადებისათვის, რომლებიც შეიცვლება.

// let და const ბლოკის მასშტაბით მოქმედებენ, ხოლო var ფუნქციის მასშტაბით. ეს კი ნიშნავს , რომ let და const ბევრად აი ბევრად 
// უსაფრთხოა ცვლადის არასწორად გამოყენებისგან, რადგან ისინი მხოლოდ ბლოკში ხელმისაწვდომია (მაგალითად, if-ი, for-ის შიგნით).

// #3
let arr = ["a","b","c","d"];

for (let i of arr) {
    console.log(i);  
}

// #4
let me = {
    name: "Tedo",
    age: 15,
    city: "Tbilisi"
};

for (let a in me) {
    console.log(a, me[a]);
}

// #5
let obieqti1 = { Surname: "Ratiani", age: 15 };
let obieqti2 = { job: "Nojob", country: "Georgia" };

const vafsheaxaliobiqeti = Object.assign({}, obieqti1, obieqti2);
console.log(vafsheaxaliobiqeti); 

// Object.assign() პირველი არგუმენტში იღებს  ობიექტს, ხოლო დანარჩენი არგუმენტები ხვდება მას, როგორც წყაროები.
// თუ ობიექტებს აქვთ მსგავსი თვისებები, Object.assign() შემოიტანს ბოლო წყაროს მნიშვნელობას.

// #6
const gamravleba = (a, b) => a * b;

console.log(gamravleba(5, 3));